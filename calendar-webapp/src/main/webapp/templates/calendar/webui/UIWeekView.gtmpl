<%
  import java.util.Calendar;
  import java.lang.Math ;
  import java.util.GregorianCalendar;
  import java.text.DateFormat;
  import java.text.SimpleDateFormat;
  import org.exoplatform.calendar.CalendarUtils;
  import java.util.Locale;
  // import org.exoplatform.webui.application.WebuiRequestContext;
  import org.exoplatform.calendar.service.CalendarEvent;
  import java.text.ParseException;
  uiform.begin()

  // Calendar currentCalendar = uicomponent.getCurrentCalendar() ;  // not used
  // int currentDay = uicomponent.getCurrentDay() ;    // not used
  // int currentMonth = uicomponent.getCurrentMonth() ;  // not used
  // int currentYear = uicomponent.getCurrentYear() ;   // not used
  // timeInterval = uicomponent.getTimeInterval() ;
  def rcontext = _ctx.getRequestContext() ;
  numberOfDays = 7 ;
  styleWidth = "width:13.8%;*width:14%;" ;
  if (uicomponent.isShowCustomView()) {
    numberOfDays = 5 ;
    styleWidth = "width:19.8%;*width:20%;" ;
  }
  // workingStart = uicomponent.getCalendarSetting().getWorkingTimeBegin() ;  // not used
  // int defaultTimeInterval = uicomponent.getDefaultTimeInterval() ;  // not used

  def requirejs = rcontext.getJavascriptManager().getRequireJS();
  requirejs.require("PORTLET/calendar/CalendarPortlet","cal");
  requirejs.addScripts('cal.UICalendarPortlet.getWorkingdays('+numberOfDays+') ;') ;

  // rcontext.getJavascriptManager().addOnLoadJavascript("eXo.calendar.UICalendarPortlet.onLoad") ; //error in addOnLoadJavascript
  requirejs.require("SHARED/base","base");
  id = Integer.toString(Math.abs(new String("cal.UICalendarPortlet.onLoad").hashCode()));
  requirejs.addScripts("base.Browser.addOnLoadCallback('mid"+id+"',cal.UICalendarPortlet.onLoad);") ;

  rcontext.getJavascriptManager().addCustomizedOnLoadScript('cal.UICalendarPortlet.checkFilter') ;
  rcontext.getJavascriptManager().addOnResizeJavascript('cal.UIWeekView.onResize') ;
  requirejs.addScripts('cal.UICalendarPortlet.currentDate = ' + uicomponent.getDefaultStartTimeOfEvent() +';') ;
  rcontext.getJavascriptManager().addCustomizedOnLoadScript('cal.CalendarLayout.updateUICalendarViewLayout(\'UIWeekView\');');
  requirejs.addScripts("cal.UICalendarPortlet.loadTitle();");

  // WebuiRequestContext context = WebuiRequestContext.getCurrentInstance() ;
  // Locale locale = context.getParentAppRequestContext().getLocale() ;
  // String currentMonthName = uicomponent.getMonthName(currentMonth) ;    // not used
  // dateFormat = uicomponent.getDateFormat() ;
  // timeFormat = uicomponent.getTimeFormat() ;
  // dateTimeFormat = uicomponent.getDateTimeFormat() ;
  // String startWorkingTime = uicomponent.getStartTime() ;
  // String endWorkingTime = uicomponent.getEndTime() ;
  // Calendar startDateOfWeek = uicomponent.getBeginDateOfWeek();
  // Calendar endDateOfWeek = uicomponent.getEndDateOfWeek();
  // String startDayViewAction = uicomponent.TYPE_DAY +"&currentTime="+ startDateOfWeek.getTimeInMillis();    // not used
  // String startMonthViewAction = uicomponent.TYPE_MONTH +"&currentTime="+ startDateOfWeek.getTimeInMillis();  // not used
  // String endDayViewAction = uicomponent.TYPE_DAY +"&currentTime="+ endDateOfWeek.getTimeInMillis();      // not used
  // String endMonthViewAction = uicomponent.TYPE_MONTH +"&currentTime="+ endDateOfWeek.getTimeInMillis();     // not used
  // boolean isShowWorkingTime = uicomponent.isShowWorkingTime() ;      // used
  // DateFormat df = new SimpleDateFormat(dateFormat, locale) ;  // not used

  // DateFormat tf = new SimpleDateFormat(timeFormat, locale) ;  // moved to java
  // DateFormat tf = uicomponent.tf;
  // tf.setCalendar(CalendarUtils.getInstanceTempCalendar()) ;
  // DateFormat dtf = new SimpleDateFormat(dateFormat+" "+CalendarUtils.TIMEFORMAT, locale) ;
  // DateFormat dtf = uicomponent.dtf;

  //DateFormat wf = new  SimpleDateFormat("EEE, dd MMM", locale) ;
  // DateFormat wf = uicomponent.wf;
  // DateFormat tempFormat =  new  SimpleDateFormat("EEE MMM dd yyyy HH:mm:ss", Locale.ENGLISH) ;
  // DateFormat tempFormat = uicomponent.tempFormat;
  // tempFormat.setCalendar(CalendarUtils.getInstanceTempCalendar()) ;
  // def eventList = [];
%>
<div class="UIWeekView uiBox uiWeekView">
  <div class="title"><%_ctx.include("app:/templates/calendar/webui/UIHeaderBar.gtmpl");%></div>
  <div class="eventWeekBar">
    <%=uicomponent.renderDayHeader() %>

    <%=uicomponent.renderAllDayGrid() %>
  </div>

  <div class="eventWeekContent eventWeekContent mainWorkingPanel" style="position: relative;" onresize="eXo.calendar.UIWeekView.onResize() ;">
    <%=uicomponent.renderEventBoard() %>
  </div>
</div>
<%uiform.end();%>

<% /*Begin Popup Menu - Calendar Actions */ %>
  <div class="uiRightClickPopupMenu dropdown-menu uiDropdownWithIcon" id="UIWeekViewRightMenu" exocallback="eXo.calendar.UICalendarPortlet.weekViewCallback" style="display: none ;" >
    <ul class="uiDropDownCal" style="display:block;">
      <li style="display: none;">
          <a class="eventAction" href="<%= uicomponent.event("View",uicomponent.id,"id&$uicomponent.CALENDARID=calId&calType=caltype&isOccur=isOccur&recurId=recurId") ; %>">
            <i class="uiIconPreview uiIconLightGray"></i>
            <%=_ctx.appRes("ContextMenu.label.View")%>
          </a>
      </li>
      <li style="display: none;">
          <a class="eventAction" href="<%= uicomponent.event("Edit",uicomponent.id,"id&$uicomponent.CALENDARID=calId&calType=caltype&isOccur=isOccur&recurId=recurId") ; %>">
            <i class="uiIconEdit uiIconLightGray"></i>
            <%=_ctx.appRes("ContextMenu.label.Edit")%>
          </a>
      </li>
      <li style="display: none;">
          <a class="eventAction" href="<%= uicomponent.event("Delete",uicomponent.id,"id&$uicomponent.CALENDARID=calId&calType=caltype&isOccur=isOccur&recurId=recurId") ; %>">
            <i class="uiIconDelete uiIconLightGray"></i>
            <%=_ctx.appRes("ContextMenu.label.Delete")%>
          </a>
      </li>
      <li style="display: none;">
          <a class="eventAction" href="<%=uicomponent.event("ExportEvent","id&$uicomponent.CALENDARID=calId&$uicomponent.CALTYPE=caltype")%>">
            <i class="uiIconCalExportCalendar uiIconLightGray"></i>
            <%=_ctx.appRes("ContextMenu.label.ExportEvent")%>
          </a>
        </li>
      <li>
        <a class="createEvent" href="#">
        <i class="uiIconCalCreateEvent uiIconLightGray"></i>
        <%=_ctx.appRes("ContextMenu.label.addEvent")%>
        </a>
      </li>
      <li>
        <a class="createTask" href="#">
        <i class="uiIconCalCreateTask uiIconLightGray"></i>
        <%=_ctx.appRes("ContextMenu.label.addTask")%>
        </a>
      </li>
    </ul>
  </div>
    
  <% /*End Popup Menu*/ %>
